// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/people": {
            "get": {
                "description": "Возвращает список людей",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Получить список людей",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Фильтр по возрасту",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фильтр по полу (male/female)",
                        "name": "gender",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фильтр по национальности",
                        "name": "nationality",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Лимит записей (по умолчанию 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Смещение (по умолчанию 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EMtask_testtask_core.Person"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Создает запись с автоматическим обогащением данных (возраст, пол, национальность)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Создать человека",
                "parameters": [
                    {
                        "description": "Данные для создания",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EMtask_testtask_core.PersonRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/EMtask_testtask_core.Person"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/person": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Получить данные человека",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID человека",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/EMtask_testtask_core.Person"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Обновить данные человека",
                "parameters": [
                    {
                        "description": "Обновляемые данные",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EMtask_testtask_core.Person"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "people"
                ],
                "summary": "Удалить человека",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID человека",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "EMtask_testtask_core.Person": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer",
                    "example": 40
                },
                "gender": {
                    "type": "string",
                    "example": "male"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "name": {
                    "type": "string",
                    "example": "Dmitry"
                },
                "nationality": {
                    "type": "string",
                    "example": "RU"
                },
                "patronymic": {
                    "type": "string",
                    "example": "Vasilevich"
                },
                "surname": {
                    "type": "string",
                    "example": "Ushakov"
                }
            }
        },
        "EMtask_testtask_core.PersonRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Dmitry"
                },
                "patronymic": {
                    "type": "string",
                    "example": "Vasilevich"
                },
                "surname": {
                    "type": "string",
                    "example": "Ushakov"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Effective Mobile test task",
	Description:      "API для управления данными людей с обогащением информации",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
